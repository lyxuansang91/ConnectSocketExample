/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINLevel', null, global);
goog.exportSymbol('proto.BINLevelUpResponse', null, global);
goog.exportSymbol('proto.BINMedal', null, global);
goog.exportSymbol('proto.BINMedalUpResponse', null, global);
goog.exportSymbol('proto.BINVipLevel', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINLevel.displayName = 'proto.BINLevel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.BINLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINLevel} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    cashgift: jspb.Message.getField(msg, 3),
    goldgift: jspb.Message.getField(msg, 4),
    maxexp: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINLevel}
 */
proto.BINLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINLevel;
  return proto.BINLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINLevel}
 */
proto.BINLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCashgift(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGoldgift(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxexp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINLevel} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLevel.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLevel.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required int32 level = 1;
 * @return {number}
 */
proto.BINLevel.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINLevel.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINLevel.prototype.clearLevel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevel.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.BINLevel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINLevel.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINLevel.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevel.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 cashGift = 3;
 * @return {number}
 */
proto.BINLevel.prototype.getCashgift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINLevel.prototype.setCashgift = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINLevel.prototype.clearCashgift = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevel.prototype.hasCashgift = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 goldGift = 4;
 * @return {number}
 */
proto.BINLevel.prototype.getGoldgift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINLevel.prototype.setGoldgift = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINLevel.prototype.clearGoldgift = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevel.prototype.hasGoldgift = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 maxExp = 5;
 * @return {number}
 */
proto.BINLevel.prototype.getMaxexp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINLevel.prototype.setMaxexp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINLevel.prototype.clearMaxexp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevel.prototype.hasMaxexp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINMedal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINMedal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINMedal.displayName = 'proto.BINMedal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINMedal.prototype.toObject = function(opt_includeInstance) {
  return proto.BINMedal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINMedal} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINMedal.toObject = function(includeInstance, msg) {
  var f, obj = {
    medal: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    maxlevel: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINMedal}
 */
proto.BINMedal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINMedal;
  return proto.BINMedal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINMedal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINMedal}
 */
proto.BINMedal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMedal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxlevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINMedal} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINMedal.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINMedal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINMedal.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 medal = 1;
 * @return {number}
 */
proto.BINMedal.prototype.getMedal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINMedal.prototype.setMedal = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINMedal.prototype.clearMedal = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedal.prototype.hasMedal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.BINMedal.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINMedal.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINMedal.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedal.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 maxLevel = 3;
 * @return {number}
 */
proto.BINMedal.prototype.getMaxlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINMedal.prototype.setMaxlevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINMedal.prototype.clearMaxlevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedal.prototype.hasMaxlevel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINVipLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINVipLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINVipLevel.displayName = 'proto.BINVipLevel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINVipLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.BINVipLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINVipLevel} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINVipLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    vip: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    maxpoint: jspb.Message.getField(msg, 3),
    totalcashpurchase: jspb.Message.getField(msg, 4),
    maxpartopup: jspb.Message.getField(msg, 5),
    maxturntopup: jspb.Message.getField(msg, 6),
    minbalanceaftertopup: jspb.Message.getField(msg, 7),
    cashtransfertax: jspb.Message.getField(msg, 8),
    cashreceived: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINVipLevel}
 */
proto.BINVipLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINVipLevel;
  return proto.BINVipLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINVipLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINVipLevel}
 */
proto.BINVipLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxpoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalcashpurchase(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpartopup(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxturntopup(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinbalanceaftertopup(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCashtransfertax(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCashreceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINVipLevel} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINVipLevel.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINVipLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINVipLevel.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required int32 vip = 1;
 * @return {number}
 */
proto.BINVipLevel.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setVip = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINVipLevel.prototype.clearVip = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasVip = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.BINVipLevel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINVipLevel.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINVipLevel.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 maxPoint = 3;
 * @return {number}
 */
proto.BINVipLevel.prototype.getMaxpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setMaxpoint = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINVipLevel.prototype.clearMaxpoint = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasMaxpoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 totalCashPurchase = 4;
 * @return {number}
 */
proto.BINVipLevel.prototype.getTotalcashpurchase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setTotalcashpurchase = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINVipLevel.prototype.clearTotalcashpurchase = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasTotalcashpurchase = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 maxParTopup = 5;
 * @return {number}
 */
proto.BINVipLevel.prototype.getMaxpartopup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setMaxpartopup = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINVipLevel.prototype.clearMaxpartopup = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasMaxpartopup = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 maxTurnTopup = 6;
 * @return {number}
 */
proto.BINVipLevel.prototype.getMaxturntopup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setMaxturntopup = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINVipLevel.prototype.clearMaxturntopup = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasMaxturntopup = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 minBalanceAfterTopup = 7;
 * @return {number}
 */
proto.BINVipLevel.prototype.getMinbalanceaftertopup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setMinbalanceaftertopup = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINVipLevel.prototype.clearMinbalanceaftertopup = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasMinbalanceaftertopup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 cashTransferTax = 8;
 * @return {number}
 */
proto.BINVipLevel.prototype.getCashtransfertax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setCashtransfertax = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINVipLevel.prototype.clearCashtransfertax = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasCashtransfertax = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 cashReceived = 9;
 * @return {number}
 */
proto.BINVipLevel.prototype.getCashreceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINVipLevel.prototype.setCashreceived = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINVipLevel.prototype.clearCashreceived = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINVipLevel.prototype.hasCashreceived = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINLevelUpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINLevelUpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINLevelUpResponse.displayName = 'proto.BINLevelUpResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINLevelUpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINLevelUpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINLevelUpResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINLevelUpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    currentexp: jspb.Message.getField(msg, 3),
    levelup: jspb.Message.getField(msg, 4),
    newlevel: (f = msg.getNewlevel()) && proto.BINLevel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINLevelUpResponse}
 */
proto.BINLevelUpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINLevelUpResponse;
  return proto.BINLevelUpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINLevelUpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINLevelUpResponse}
 */
proto.BINLevelUpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentexp(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLevelup(value);
      break;
    case 5:
      var value = new proto.BINLevel;
      reader.readMessage(value,proto.BINLevel.deserializeBinaryFromReader);
      msg.setNewlevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINLevelUpResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLevelUpResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINLevelUpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLevelUpResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getNewlevel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.BINLevel.serializeBinaryToWriter
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINLevelUpResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINLevelUpResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINLevelUpResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevelUpResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINLevelUpResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINLevelUpResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINLevelUpResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevelUpResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 currentExp = 3;
 * @return {number}
 */
proto.BINLevelUpResponse.prototype.getCurrentexp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINLevelUpResponse.prototype.setCurrentexp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINLevelUpResponse.prototype.clearCurrentexp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevelUpResponse.prototype.hasCurrentexp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool levelUp = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINLevelUpResponse.prototype.getLevelup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.BINLevelUpResponse.prototype.setLevelup = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINLevelUpResponse.prototype.clearLevelup = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevelUpResponse.prototype.hasLevelup = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BINLevel newLevel = 5;
 * @return {?proto.BINLevel}
 */
proto.BINLevelUpResponse.prototype.getNewlevel = function() {
  return /** @type{?proto.BINLevel} */ (
    jspb.Message.getWrapperField(this, proto.BINLevel, 5));
};


/** @param {?proto.BINLevel|undefined} value */
proto.BINLevelUpResponse.prototype.setNewlevel = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.BINLevelUpResponse.prototype.clearNewlevel = function() {
  this.setNewlevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLevelUpResponse.prototype.hasNewlevel = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINMedalUpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINMedalUpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINMedalUpResponse.displayName = 'proto.BINMedalUpResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINMedalUpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINMedalUpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINMedalUpResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINMedalUpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    newmedal: (f = msg.getNewmedal()) && proto.BINMedal.toObject(includeInstance, f),
    currentlevel: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINMedalUpResponse}
 */
proto.BINMedalUpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINMedalUpResponse;
  return proto.BINMedalUpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINMedalUpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINMedalUpResponse}
 */
proto.BINMedalUpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.BINMedal;
      reader.readMessage(value,proto.BINMedal.deserializeBinaryFromReader);
      msg.setNewmedal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentlevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINMedalUpResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINMedalUpResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINMedalUpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINMedalUpResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getNewmedal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BINMedal.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINMedalUpResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINMedalUpResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINMedalUpResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedalUpResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINMedalUpResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINMedalUpResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINMedalUpResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedalUpResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BINMedal newMedal = 3;
 * @return {?proto.BINMedal}
 */
proto.BINMedalUpResponse.prototype.getNewmedal = function() {
  return /** @type{?proto.BINMedal} */ (
    jspb.Message.getWrapperField(this, proto.BINMedal, 3));
};


/** @param {?proto.BINMedal|undefined} value */
proto.BINMedalUpResponse.prototype.setNewmedal = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.BINMedalUpResponse.prototype.clearNewmedal = function() {
  this.setNewmedal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedalUpResponse.prototype.hasNewmedal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 currentLevel = 4;
 * @return {number}
 */
proto.BINMedalUpResponse.prototype.getCurrentlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINMedalUpResponse.prototype.setCurrentlevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINMedalUpResponse.prototype.clearCurrentlevel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINMedalUpResponse.prototype.hasCurrentlevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);

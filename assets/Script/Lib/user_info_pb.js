/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var level_pb = require('./level_pb.js');
goog.exportSymbol('proto.BINUserInfo', null, global);
goog.exportSymbol('proto.BINUserSetting', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserInfo.displayName = 'proto.BINUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    displayname: jspb.Message.getField(msg, 3),
    avatarid: jspb.Message.getField(msg, 4),
    sex: jspb.Message.getField(msg, 5),
    age: jspb.Message.getField(msg, 6),
    level: (f = msg.getLevel()) && level_pb.BINLevel.toObject(includeInstance, f),
    medal: (f = msg.getMedal()) && level_pb.BINMedal.toObject(includeInstance, f),
    trustedindex: jspb.Message.getField(msg, 9),
    exp: jspb.Message.getField(msg, 10),
    cash: jspb.Message.getField(msg, 11),
    gold: jspb.Message.getField(msg, 12),
    totalmatch: jspb.Message.getField(msg, 13),
    totalwin: jspb.Message.getField(msg, 14),
    totalcashexchanged: jspb.Message.getField(msg, 15),
    totalmoneyexchanged: jspb.Message.getField(msg, 16),
    totalmoneycharged: jspb.Message.getField(msg, 17),
    lastlogintime: jspb.Message.getField(msg, 18),
    isonline: jspb.Message.getField(msg, 19),
    usertype: jspb.Message.getField(msg, 20),
    email: jspb.Message.getField(msg, 21),
    mobile: jspb.Message.getField(msg, 22),
    identity: jspb.Message.getField(msg, 23),
    accountverified: jspb.Message.getField(msg, 24),
    disablecashtransaction: jspb.Message.getField(msg, 25),
    securitykeyset: jspb.Message.getField(msg, 26),
    cashlock: jspb.Message.getField(msg, 27),
    goldlock: jspb.Message.getField(msg, 28),
    viplevel: (f = msg.getViplevel()) && level_pb.BINVipLevel.toObject(includeInstance, f),
    vippoint: jspb.Message.getField(msg, 30),
    remoteip: jspb.Message.getField(msg, 31)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserInfo}
 */
proto.BINUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserInfo;
  return proto.BINUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserInfo}
 */
proto.BINUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvatarid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 7:
      var value = new level_pb.BINLevel;
      reader.readMessage(value,level_pb.BINLevel.deserializeBinaryFromReader);
      msg.setLevel(value);
      break;
    case 8:
      var value = new level_pb.BINMedal;
      reader.readMessage(value,level_pb.BINMedal.deserializeBinaryFromReader);
      msg.setMedal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrustedindex(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCash(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGold(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalmatch(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalwin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalcashexchanged(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalmoneyexchanged(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalmoneycharged(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastlogintime(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsonline(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsertype(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobile(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccountverified(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablecashtransaction(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecuritykeyset(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCashlock(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGoldlock(value);
      break;
    case 29:
      var value = new level_pb.BINVipLevel;
      reader.readMessage(value,level_pb.BINVipLevel.deserializeBinaryFromReader);
      msg.setViplevel(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVippoint(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getLevel();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      level_pb.BINLevel.serializeBinaryToWriter
    );
  }
  f = this.getMedal();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      level_pb.BINMedal.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 12));
  if (f != null) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 16));
  if (f != null) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 17));
  if (f != null) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 18));
  if (f != null) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 20));
  if (f != null) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 26));
  if (f != null) {
    writer.writeBool(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 27));
  if (f != null) {
    writer.writeInt64(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 28));
  if (f != null) {
    writer.writeInt64(
      28,
      f
    );
  }
  f = this.getViplevel();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      level_pb.BINVipLevel.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 30));
  if (f != null) {
    writer.writeInt64(
      30,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 31));
  if (f != null) {
    writer.writeString(
      31,
      f
    );
  }
};


/**
 * required int64 userId = 1;
 * @return {number}
 */
proto.BINUserInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserInfo.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userName = 2;
 * @return {string}
 */
proto.BINUserInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINUserInfo.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string displayName = 3;
 * @return {string}
 */
proto.BINUserInfo.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setDisplayname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINUserInfo.prototype.clearDisplayname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasDisplayname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 avatarId = 4;
 * @return {number}
 */
proto.BINUserInfo.prototype.getAvatarid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setAvatarid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINUserInfo.prototype.clearAvatarid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasAvatarid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 sex = 5;
 * @return {number}
 */
proto.BINUserInfo.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setSex = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINUserInfo.prototype.clearSex = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasSex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 age = 6;
 * @return {number}
 */
proto.BINUserInfo.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setAge = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINUserInfo.prototype.clearAge = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasAge = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BINLevel level = 7;
 * @return {?proto.BINLevel}
 */
proto.BINUserInfo.prototype.getLevel = function() {
  return /** @type{?proto.BINLevel} */ (
    jspb.Message.getWrapperField(this, level_pb.BINLevel, 7));
};


/** @param {?proto.BINLevel|undefined} value */
proto.BINUserInfo.prototype.setLevel = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.BINUserInfo.prototype.clearLevel = function() {
  this.setLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BINMedal medal = 8;
 * @return {?proto.BINMedal}
 */
proto.BINUserInfo.prototype.getMedal = function() {
  return /** @type{?proto.BINMedal} */ (
    jspb.Message.getWrapperField(this, level_pb.BINMedal, 8));
};


/** @param {?proto.BINMedal|undefined} value */
proto.BINUserInfo.prototype.setMedal = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.BINUserInfo.prototype.clearMedal = function() {
  this.setMedal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasMedal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 trustedIndex = 9;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTrustedindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTrustedindex = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINUserInfo.prototype.clearTrustedindex = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTrustedindex = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 exp = 10;
 * @return {number}
 */
proto.BINUserInfo.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setExp = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BINUserInfo.prototype.clearExp = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasExp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 cash = 11;
 * @return {number}
 */
proto.BINUserInfo.prototype.getCash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setCash = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BINUserInfo.prototype.clearCash = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasCash = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int64 gold = 12;
 * @return {number}
 */
proto.BINUserInfo.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setGold = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.BINUserInfo.prototype.clearGold = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasGold = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 totalMatch = 13;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTotalmatch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTotalmatch = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.BINUserInfo.prototype.clearTotalmatch = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTotalmatch = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 totalWin = 14;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTotalwin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTotalwin = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.BINUserInfo.prototype.clearTotalwin = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTotalwin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int64 totalCashExchanged = 15;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTotalcashexchanged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTotalcashexchanged = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.BINUserInfo.prototype.clearTotalcashexchanged = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTotalcashexchanged = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int64 totalMoneyExchanged = 16;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTotalmoneyexchanged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTotalmoneyexchanged = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.BINUserInfo.prototype.clearTotalmoneyexchanged = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTotalmoneyexchanged = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 totalMoneyCharged = 17;
 * @return {number}
 */
proto.BINUserInfo.prototype.getTotalmoneycharged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setTotalmoneycharged = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.BINUserInfo.prototype.clearTotalmoneycharged = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasTotalmoneycharged = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int64 lastLoginTime = 18;
 * @return {number}
 */
proto.BINUserInfo.prototype.getLastlogintime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setLastlogintime = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.BINUserInfo.prototype.clearLastlogintime = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasLastlogintime = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool isOnline = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserInfo.prototype.getIsonline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.BINUserInfo.prototype.setIsonline = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.BINUserInfo.prototype.clearIsonline = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasIsonline = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int32 userType = 20;
 * @return {number}
 */
proto.BINUserInfo.prototype.getUsertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setUsertype = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.BINUserInfo.prototype.clearUsertype = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasUsertype = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string email = 21;
 * @return {string}
 */
proto.BINUserInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.BINUserInfo.prototype.clearEmail = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string mobile = 22;
 * @return {string}
 */
proto.BINUserInfo.prototype.getMobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setMobile = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.BINUserInfo.prototype.clearMobile = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasMobile = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string identity = 23;
 * @return {string}
 */
proto.BINUserInfo.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setIdentity = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.BINUserInfo.prototype.clearIdentity = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool accountVerified = 24;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserInfo.prototype.getAccountverified = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 24, false));
};


/** @param {boolean} value */
proto.BINUserInfo.prototype.setAccountverified = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.BINUserInfo.prototype.clearAccountverified = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasAccountverified = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool disableCashTransaction = 25;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserInfo.prototype.getDisablecashtransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 25, false));
};


/** @param {boolean} value */
proto.BINUserInfo.prototype.setDisablecashtransaction = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.BINUserInfo.prototype.clearDisablecashtransaction = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasDisablecashtransaction = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional bool securityKeySet = 26;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserInfo.prototype.getSecuritykeyset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 26, false));
};


/** @param {boolean} value */
proto.BINUserInfo.prototype.setSecuritykeyset = function(value) {
  jspb.Message.setField(this, 26, value);
};


proto.BINUserInfo.prototype.clearSecuritykeyset = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasSecuritykeyset = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional int64 cashLock = 27;
 * @return {number}
 */
proto.BINUserInfo.prototype.getCashlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setCashlock = function(value) {
  jspb.Message.setField(this, 27, value);
};


proto.BINUserInfo.prototype.clearCashlock = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasCashlock = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional int64 goldLock = 28;
 * @return {number}
 */
proto.BINUserInfo.prototype.getGoldlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setGoldlock = function(value) {
  jspb.Message.setField(this, 28, value);
};


proto.BINUserInfo.prototype.clearGoldlock = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasGoldlock = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional BINVipLevel vipLevel = 29;
 * @return {?proto.BINVipLevel}
 */
proto.BINUserInfo.prototype.getViplevel = function() {
  return /** @type{?proto.BINVipLevel} */ (
    jspb.Message.getWrapperField(this, level_pb.BINVipLevel, 29));
};


/** @param {?proto.BINVipLevel|undefined} value */
proto.BINUserInfo.prototype.setViplevel = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.BINUserInfo.prototype.clearViplevel = function() {
  this.setViplevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasViplevel = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional int64 vipPoint = 30;
 * @return {number}
 */
proto.BINUserInfo.prototype.getVippoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.BINUserInfo.prototype.setVippoint = function(value) {
  jspb.Message.setField(this, 30, value);
};


proto.BINUserInfo.prototype.clearVippoint = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasVippoint = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional string remoteIp = 31;
 * @return {string}
 */
proto.BINUserInfo.prototype.getRemoteip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.BINUserInfo.prototype.setRemoteip = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.BINUserInfo.prototype.clearRemoteip = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserInfo.prototype.hasRemoteip = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserSetting.displayName = 'proto.BINUserSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserSetting} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    autoready: jspb.Message.getField(msg, 2),
    autodenyinvitation: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserSetting}
 */
proto.BINUserSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserSetting;
  return proto.BINUserSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserSetting}
 */
proto.BINUserSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoready(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutodenyinvitation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserSetting} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserSetting.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserSetting.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required int64 userId = 1;
 * @return {number}
 */
proto.BINUserSetting.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINUserSetting.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserSetting.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserSetting.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool autoReady = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserSetting.prototype.getAutoready = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.BINUserSetting.prototype.setAutoready = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINUserSetting.prototype.clearAutoready = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserSetting.prototype.hasAutoready = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool autoDenyInvitation = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserSetting.prototype.getAutodenyinvitation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BINUserSetting.prototype.setAutodenyinvitation = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINUserSetting.prototype.clearAutodenyinvitation = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserSetting.prototype.hasAutodenyinvitation = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);

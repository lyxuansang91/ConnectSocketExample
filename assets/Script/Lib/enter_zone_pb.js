/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINEnterZoneRequest', null, global);
goog.exportSymbol('proto.BINEnterZoneResponse', null, global);
goog.exportSymbol('proto.BINExitZoneRequest', null, global);
goog.exportSymbol('proto.BINExitZoneResponse', null, global);
goog.exportSymbol('proto.BINRoomConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINEnterZoneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINEnterZoneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINEnterZoneRequest.displayName = 'proto.BINEnterZoneRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINEnterZoneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINEnterZoneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINEnterZoneRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINEnterZoneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINEnterZoneRequest}
 */
proto.BINEnterZoneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINEnterZoneRequest;
  return proto.BINEnterZoneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINEnterZoneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINEnterZoneRequest}
 */
proto.BINEnterZoneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINEnterZoneRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINEnterZoneRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINEnterZoneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINEnterZoneRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 zoneId = 1;
 * @return {number}
 */
proto.BINEnterZoneRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINEnterZoneRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINEnterZoneRequest.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneRequest.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINRoomConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomConfig.displayName = 'proto.BINRoomConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINRoomConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomgroupid: jspb.Message.getField(msg, 1),
    roomname: jspb.Message.getField(msg, 2),
    viproom: jspb.Message.getField(msg, 3),
    mincash: jspb.Message.getField(msg, 4),
    mingold: jspb.Message.getField(msg, 5),
    minlevel: jspb.Message.getField(msg, 6),
    roomcapacity: jspb.Message.getField(msg, 7),
    playersize: jspb.Message.getField(msg, 8),
    minbet: jspb.Message.getField(msg, 9),
    tax: jspb.Message.getField(msg, 10),
    active: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomConfig}
 */
proto.BINRoomConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomConfig;
  return proto.BINRoomConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomConfig}
 */
proto.BINRoomConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomgroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViproom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMincash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMingold(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinlevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomcapacity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayersize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinbet(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINRoomConfig.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINRoomConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * required int32 roomGroupId = 1;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getRoomgroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setRoomgroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomConfig.prototype.clearRoomgroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasRoomgroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string roomName = 2;
 * @return {string}
 */
proto.BINRoomConfig.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINRoomConfig.prototype.setRoomname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINRoomConfig.prototype.clearRoomname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasRoomname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool vipRoom = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomConfig.prototype.getViproom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BINRoomConfig.prototype.setViproom = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINRoomConfig.prototype.clearViproom = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasViproom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 minCash = 4;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getMincash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setMincash = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINRoomConfig.prototype.clearMincash = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasMincash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 minGold = 5;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getMingold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setMingold = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINRoomConfig.prototype.clearMingold = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasMingold = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 minLevel = 6;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getMinlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setMinlevel = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINRoomConfig.prototype.clearMinlevel = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasMinlevel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 roomCapacity = 7;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getRoomcapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setRoomcapacity = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINRoomConfig.prototype.clearRoomcapacity = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasRoomcapacity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 playerSize = 8;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getPlayersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setPlayersize = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINRoomConfig.prototype.clearPlayersize = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasPlayersize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 minBet = 9;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getMinbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setMinbet = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINRoomConfig.prototype.clearMinbet = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasMinbet = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int32 tax = 10;
 * @return {number}
 */
proto.BINRoomConfig.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.BINRoomConfig.prototype.setTax = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BINRoomConfig.prototype.clearTax = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasTax = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required bool active = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomConfig.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.BINRoomConfig.prototype.setActive = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BINRoomConfig.prototype.clearActive = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomConfig.prototype.hasActive = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINEnterZoneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINEnterZoneResponse.repeatedFields_, null);
};
goog.inherits(proto.BINEnterZoneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINEnterZoneResponse.displayName = 'proto.BINEnterZoneResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINEnterZoneResponse.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINEnterZoneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINEnterZoneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINEnterZoneResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINEnterZoneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    enabledisplayroomlist: jspb.Message.getField(msg, 3),
    defaultroomtypeload: jspb.Message.getField(msg, 4),
    cashroomconfigsList: jspb.Message.toObjectList(msg.getCashroomconfigsList(),
    proto.BINRoomConfig.toObject, includeInstance),
    goldroomconfigsList: jspb.Message.toObjectList(msg.getGoldroomconfigsList(),
    proto.BINRoomConfig.toObject, includeInstance),
    zoneid: jspb.Message.getField(msg, 7),
    jarstatus: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINEnterZoneResponse}
 */
proto.BINEnterZoneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINEnterZoneResponse;
  return proto.BINEnterZoneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINEnterZoneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINEnterZoneResponse}
 */
proto.BINEnterZoneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabledisplayroomlist(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultroomtypeload(value);
      break;
    case 5:
      var value = new proto.BINRoomConfig;
      reader.readMessage(value,proto.BINRoomConfig.deserializeBinaryFromReader);
      msg.addCashroomconfigs(value);
      break;
    case 6:
      var value = new proto.BINRoomConfig;
      reader.readMessage(value,proto.BINRoomConfig.deserializeBinaryFromReader);
      msg.addGoldroomconfigs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJarstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINEnterZoneResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINEnterZoneResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINEnterZoneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINEnterZoneResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getCashroomconfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.BINRoomConfig.serializeBinaryToWriter
    );
  }
  f = this.getGoldroomconfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.BINRoomConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINEnterZoneResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINEnterZoneResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINEnterZoneResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINEnterZoneResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINEnterZoneResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINEnterZoneResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enableDisplayRoomList = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINEnterZoneResponse.prototype.getEnabledisplayroomlist = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BINEnterZoneResponse.prototype.setEnabledisplayroomlist = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINEnterZoneResponse.prototype.clearEnabledisplayroomlist = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasEnabledisplayroomlist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 defaultRoomTypeLoad = 4;
 * @return {number}
 */
proto.BINEnterZoneResponse.prototype.getDefaultroomtypeload = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINEnterZoneResponse.prototype.setDefaultroomtypeload = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINEnterZoneResponse.prototype.clearDefaultroomtypeload = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasDefaultroomtypeload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated BINRoomConfig cashRoomConfigs = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.BINRoomConfig>}
 */
proto.BINEnterZoneResponse.prototype.getCashroomconfigsList = function() {
  return /** @type{!Array.<!proto.BINRoomConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINRoomConfig, 5));
};


/** @param {!Array.<!proto.BINRoomConfig>} value */
proto.BINEnterZoneResponse.prototype.setCashroomconfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.BINRoomConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINRoomConfig}
 */
proto.BINEnterZoneResponse.prototype.addCashroomconfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.BINRoomConfig, opt_index);
};


proto.BINEnterZoneResponse.prototype.clearCashroomconfigsList = function() {
  this.setCashroomconfigsList([]);
};


/**
 * repeated BINRoomConfig goldRoomConfigs = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.BINRoomConfig>}
 */
proto.BINEnterZoneResponse.prototype.getGoldroomconfigsList = function() {
  return /** @type{!Array.<!proto.BINRoomConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINRoomConfig, 6));
};


/** @param {!Array.<!proto.BINRoomConfig>} value */
proto.BINEnterZoneResponse.prototype.setGoldroomconfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.BINRoomConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINRoomConfig}
 */
proto.BINEnterZoneResponse.prototype.addGoldroomconfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.BINRoomConfig, opt_index);
};


proto.BINEnterZoneResponse.prototype.clearGoldroomconfigsList = function() {
  this.setGoldroomconfigsList([]);
};


/**
 * optional int32 zoneId = 7;
 * @return {number}
 */
proto.BINEnterZoneResponse.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINEnterZoneResponse.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINEnterZoneResponse.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool jarStatus = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINEnterZoneResponse.prototype.getJarstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.BINEnterZoneResponse.prototype.setJarstatus = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINEnterZoneResponse.prototype.clearJarstatus = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINEnterZoneResponse.prototype.hasJarstatus = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINExitZoneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINExitZoneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINExitZoneRequest.displayName = 'proto.BINExitZoneRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINExitZoneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINExitZoneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINExitZoneRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINExitZoneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINExitZoneRequest}
 */
proto.BINExitZoneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINExitZoneRequest;
  return proto.BINExitZoneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINExitZoneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINExitZoneRequest}
 */
proto.BINExitZoneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINExitZoneRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINExitZoneRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINExitZoneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINExitZoneRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 zoneId = 1;
 * @return {number}
 */
proto.BINExitZoneRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINExitZoneRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINExitZoneRequest.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINExitZoneRequest.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINExitZoneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINExitZoneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINExitZoneResponse.displayName = 'proto.BINExitZoneResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINExitZoneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINExitZoneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINExitZoneResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINExitZoneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    zoneid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINExitZoneResponse}
 */
proto.BINExitZoneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINExitZoneResponse;
  return proto.BINExitZoneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINExitZoneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINExitZoneResponse}
 */
proto.BINExitZoneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINExitZoneResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINExitZoneResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINExitZoneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINExitZoneResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINExitZoneResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINExitZoneResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINExitZoneResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINExitZoneResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINExitZoneResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINExitZoneResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINExitZoneResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINExitZoneResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 zoneId = 3;
 * @return {number}
 */
proto.BINExitZoneResponse.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINExitZoneResponse.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINExitZoneResponse.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINExitZoneResponse.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
